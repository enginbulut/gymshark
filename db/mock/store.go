// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/enginbulut/gymshark/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/enginbulut/gymshark/db/sqlc"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockStore) CreateOrder(arg0 context.Context, arg1 db.CreateOrderParams) (db.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", arg0, arg1)
	ret0, _ := ret[0].(db.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockStoreMockRecorder) CreateOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockStore)(nil).CreateOrder), arg0, arg1)
}

// CreateOrderItem mocks base method.
func (m *MockStore) CreateOrderItem(arg0 context.Context, arg1 db.CreateOrderItemParams) (db.OrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderItem", arg0, arg1)
	ret0, _ := ret[0].(db.OrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrderItem indicates an expected call of CreateOrderItem.
func (mr *MockStoreMockRecorder) CreateOrderItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderItem", reflect.TypeOf((*MockStore)(nil).CreateOrderItem), arg0, arg1)
}

// CreatePackSize mocks base method.
func (m *MockStore) CreatePackSize(arg0 context.Context, arg1 db.CreatePackSizeParams) (db.PackSize, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePackSize", arg0, arg1)
	ret0, _ := ret[0].(db.PackSize)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePackSize indicates an expected call of CreatePackSize.
func (mr *MockStoreMockRecorder) CreatePackSize(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePackSize", reflect.TypeOf((*MockStore)(nil).CreatePackSize), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// DeletePackSize mocks base method.
func (m *MockStore) DeletePackSize(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePackSize", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePackSize indicates an expected call of DeletePackSize.
func (mr *MockStoreMockRecorder) DeletePackSize(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePackSize", reflect.TypeOf((*MockStore)(nil).DeletePackSize), arg0, arg1)
}

// GetClosestPackSizeByQuantity mocks base method.
func (m *MockStore) GetClosestPackSizeByQuantity(arg0 context.Context, arg1 int32) (db.PackSize, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClosestPackSizeByQuantity", arg0, arg1)
	ret0, _ := ret[0].(db.PackSize)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClosestPackSizeByQuantity indicates an expected call of GetClosestPackSizeByQuantity.
func (mr *MockStoreMockRecorder) GetClosestPackSizeByQuantity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClosestPackSizeByQuantity", reflect.TypeOf((*MockStore)(nil).GetClosestPackSizeByQuantity), arg0, arg1)
}

// GetOrder mocks base method.
func (m *MockStore) GetOrder(arg0 context.Context, arg1 int64) (db.GetOrderRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", arg0, arg1)
	ret0, _ := ret[0].(db.GetOrderRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockStoreMockRecorder) GetOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockStore)(nil).GetOrder), arg0, arg1)
}

// GetOrderItemsByOrderId mocks base method.
func (m *MockStore) GetOrderItemsByOrderId(arg0 context.Context, arg1 int32) ([]db.GetOrderItemsByOrderIdRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderItemsByOrderId", arg0, arg1)
	ret0, _ := ret[0].([]db.GetOrderItemsByOrderIdRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderItemsByOrderId indicates an expected call of GetOrderItemsByOrderId.
func (mr *MockStoreMockRecorder) GetOrderItemsByOrderId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderItemsByOrderId", reflect.TypeOf((*MockStore)(nil).GetOrderItemsByOrderId), arg0, arg1)
}

// GetOrderItemsByPackSizeId mocks base method.
func (m *MockStore) GetOrderItemsByPackSizeId(arg0 context.Context, arg1 int32) ([]db.GetOrderItemsByPackSizeIdRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderItemsByPackSizeId", arg0, arg1)
	ret0, _ := ret[0].([]db.GetOrderItemsByPackSizeIdRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderItemsByPackSizeId indicates an expected call of GetOrderItemsByPackSizeId.
func (mr *MockStoreMockRecorder) GetOrderItemsByPackSizeId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderItemsByPackSizeId", reflect.TypeOf((*MockStore)(nil).GetOrderItemsByPackSizeId), arg0, arg1)
}

// GetOrders mocks base method.
func (m *MockStore) GetOrders(arg0 context.Context, arg1 db.GetOrdersParams) ([]db.GetOrdersRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", arg0, arg1)
	ret0, _ := ret[0].([]db.GetOrdersRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockStoreMockRecorder) GetOrders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockStore)(nil).GetOrders), arg0, arg1)
}

// GetOrdersByUserId mocks base method.
func (m *MockStore) GetOrdersByUserId(arg0 context.Context, arg1 db.GetOrdersByUserIdParams) ([]db.GetOrdersByUserIdRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersByUserId", arg0, arg1)
	ret0, _ := ret[0].([]db.GetOrdersByUserIdRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersByUserId indicates an expected call of GetOrdersByUserId.
func (mr *MockStoreMockRecorder) GetOrdersByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersByUserId", reflect.TypeOf((*MockStore)(nil).GetOrdersByUserId), arg0, arg1)
}

// GetOrdersCount mocks base method.
func (m *MockStore) GetOrdersCount(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersCount", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersCount indicates an expected call of GetOrdersCount.
func (mr *MockStoreMockRecorder) GetOrdersCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersCount", reflect.TypeOf((*MockStore)(nil).GetOrdersCount), arg0)
}

// GetOrdersCountByUserId mocks base method.
func (m *MockStore) GetOrdersCountByUserId(arg0 context.Context, arg1 int32) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersCountByUserId", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersCountByUserId indicates an expected call of GetOrdersCountByUserId.
func (mr *MockStoreMockRecorder) GetOrdersCountByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersCountByUserId", reflect.TypeOf((*MockStore)(nil).GetOrdersCountByUserId), arg0, arg1)
}

// GetPackSize mocks base method.
func (m *MockStore) GetPackSize(arg0 context.Context, arg1 int64) (db.PackSize, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackSize", arg0, arg1)
	ret0, _ := ret[0].(db.PackSize)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPackSize indicates an expected call of GetPackSize.
func (mr *MockStoreMockRecorder) GetPackSize(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackSize", reflect.TypeOf((*MockStore)(nil).GetPackSize), arg0, arg1)
}

// GetPackSizeCount mocks base method.
func (m *MockStore) GetPackSizeCount(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackSizeCount", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPackSizeCount indicates an expected call of GetPackSizeCount.
func (mr *MockStoreMockRecorder) GetPackSizeCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackSizeCount", reflect.TypeOf((*MockStore)(nil).GetPackSizeCount), arg0)
}

// GetPackSizesWithPagination mocks base method.
func (m *MockStore) GetPackSizesWithPagination(arg0 context.Context, arg1 db.GetPackSizesWithPaginationParams) ([]db.PackSize, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackSizesWithPagination", arg0, arg1)
	ret0, _ := ret[0].([]db.PackSize)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPackSizesWithPagination indicates an expected call of GetPackSizesWithPagination.
func (mr *MockStoreMockRecorder) GetPackSizesWithPagination(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackSizesWithPagination", reflect.TypeOf((*MockStore)(nil).GetPackSizesWithPagination), arg0, arg1)
}

// GetPackSizesWithoutPagination mocks base method.
func (m *MockStore) GetPackSizesWithoutPagination(arg0 context.Context) ([]db.PackSize, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackSizesWithoutPagination", arg0)
	ret0, _ := ret[0].([]db.PackSize)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPackSizesWithoutPagination indicates an expected call of GetPackSizesWithoutPagination.
func (mr *MockStoreMockRecorder) GetPackSizesWithoutPagination(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackSizesWithoutPagination", reflect.TypeOf((*MockStore)(nil).GetPackSizesWithoutPagination), arg0)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// UpdatePackSize mocks base method.
func (m *MockStore) UpdatePackSize(arg0 context.Context, arg1 db.UpdatePackSizeParams) (db.PackSize, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePackSize", arg0, arg1)
	ret0, _ := ret[0].(db.PackSize)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePackSize indicates an expected call of UpdatePackSize.
func (mr *MockStoreMockRecorder) UpdatePackSize(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePackSize", reflect.TypeOf((*MockStore)(nil).UpdatePackSize), arg0, arg1)
}
