// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: order.sql

package db

import (
	"context"
	"time"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
    purchased_item_count,
    requested_item_count,
    user_id
) VALUES (
    $1, $2, $3
) RETURNING id, purchased_item_count, requested_item_count, user_id, created_at
`

type CreateOrderParams struct {
	PurchasedItemCount int32 `json:"purchased_item_count"`
	RequestedItemCount int32 `json:"requested_item_count"`
	UserID             int32 `json:"user_id"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder, arg.PurchasedItemCount, arg.RequestedItemCount, arg.UserID)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.PurchasedItemCount,
		&i.RequestedItemCount,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const getOrder = `-- name: GetOrder :one
SELECT o.id, o.purchased_item_count, o.requested_item_count, o.user_id, o.created_at, u.email as user_email, u.full_name as user_full_name
FROM orders o
INNER JOIN users u on o.user_id = u.id
WHERE o.id = $1 LIMIT 1
`

type GetOrderRow struct {
	ID                 int64     `json:"id"`
	PurchasedItemCount int32     `json:"purchased_item_count"`
	RequestedItemCount int32     `json:"requested_item_count"`
	UserID             int32     `json:"user_id"`
	CreatedAt          time.Time `json:"created_at"`
	UserEmail          string    `json:"user_email"`
	UserFullName       string    `json:"user_full_name"`
}

func (q *Queries) GetOrder(ctx context.Context, id int64) (GetOrderRow, error) {
	row := q.db.QueryRowContext(ctx, getOrder, id)
	var i GetOrderRow
	err := row.Scan(
		&i.ID,
		&i.PurchasedItemCount,
		&i.RequestedItemCount,
		&i.UserID,
		&i.CreatedAt,
		&i.UserEmail,
		&i.UserFullName,
	)
	return i, err
}

const getOrders = `-- name: GetOrders :many
SELECT o.id, o.purchased_item_count, o.requested_item_count, o.user_id, o.created_at, u.email as user_email, u.full_name as user_full_name
FROM orders o
INNER JOIN users u on o.user_id = u.id
ORDER BY o.id desc
LIMIT $1
OFFSET $2
`

type GetOrdersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetOrdersRow struct {
	ID                 int64     `json:"id"`
	PurchasedItemCount int32     `json:"purchased_item_count"`
	RequestedItemCount int32     `json:"requested_item_count"`
	UserID             int32     `json:"user_id"`
	CreatedAt          time.Time `json:"created_at"`
	UserEmail          string    `json:"user_email"`
	UserFullName       string    `json:"user_full_name"`
}

func (q *Queries) GetOrders(ctx context.Context, arg GetOrdersParams) ([]GetOrdersRow, error) {
	rows, err := q.db.QueryContext(ctx, getOrders, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetOrdersRow{}
	for rows.Next() {
		var i GetOrdersRow
		if err := rows.Scan(
			&i.ID,
			&i.PurchasedItemCount,
			&i.RequestedItemCount,
			&i.UserID,
			&i.CreatedAt,
			&i.UserEmail,
			&i.UserFullName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrdersByUserId = `-- name: GetOrdersByUserId :many
SELECT o.id, o.purchased_item_count, o.requested_item_count, o.user_id, o.created_at, u.email as user_email, u.full_name as user_full_name
FROM orders o
INNER JOIN users u on o.user_id = u.id
WHERE o.user_id = $1
ORDER BY o.id desc
LIMIT $2
OFFSET $3
`

type GetOrdersByUserIdParams struct {
	UserID int32 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetOrdersByUserIdRow struct {
	ID                 int64     `json:"id"`
	PurchasedItemCount int32     `json:"purchased_item_count"`
	RequestedItemCount int32     `json:"requested_item_count"`
	UserID             int32     `json:"user_id"`
	CreatedAt          time.Time `json:"created_at"`
	UserEmail          string    `json:"user_email"`
	UserFullName       string    `json:"user_full_name"`
}

func (q *Queries) GetOrdersByUserId(ctx context.Context, arg GetOrdersByUserIdParams) ([]GetOrdersByUserIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getOrdersByUserId, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetOrdersByUserIdRow{}
	for rows.Next() {
		var i GetOrdersByUserIdRow
		if err := rows.Scan(
			&i.ID,
			&i.PurchasedItemCount,
			&i.RequestedItemCount,
			&i.UserID,
			&i.CreatedAt,
			&i.UserEmail,
			&i.UserFullName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrdersCount = `-- name: GetOrdersCount :one
SELECT COUNT(*)
FROM orders o
INNER JOIN users u on o.user_id = u.id
`

func (q *Queries) GetOrdersCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getOrdersCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getOrdersCountByUserId = `-- name: GetOrdersCountByUserId :one
SELECT COUNT(*)
FROM orders o
INNER JOIN users u on o.user_id = u.id
WHERE o.user_id = $1
`

func (q *Queries) GetOrdersCountByUserId(ctx context.Context, userID int32) (int64, error) {
	row := q.db.QueryRowContext(ctx, getOrdersCountByUserId, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}
