// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: pack_size.sql

package db

import (
	"context"
)

const createPackSize = `-- name: CreatePackSize :one
INSERT INTO pack_sizes (
    name,
    quantity
) VALUES (
    $1, $2
) RETURNING id, name, quantity, deleted_at, created_at
`

type CreatePackSizeParams struct {
	Name     string `json:"name"`
	Quantity int32  `json:"quantity"`
}

func (q *Queries) CreatePackSize(ctx context.Context, arg CreatePackSizeParams) (PackSize, error) {
	row := q.db.QueryRowContext(ctx, createPackSize, arg.Name, arg.Quantity)
	var i PackSize
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Quantity,
		&i.DeletedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deletePackSize = `-- name: DeletePackSize :exec
UPDATE pack_sizes
SET deleted_at = NOW()
WHERE id = $1
`

func (q *Queries) DeletePackSize(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePackSize, id)
	return err
}

const getClosestPackSizeByQuantity = `-- name: GetClosestPackSizeByQuantity :one
SELECT id, name, quantity, deleted_at, created_at FROM pack_sizes
WHERE deleted_at IS NULL and quantity <= $1
ORDER BY quantity DESC
LIMIT 1
`

func (q *Queries) GetClosestPackSizeByQuantity(ctx context.Context, quantity int32) (PackSize, error) {
	row := q.db.QueryRowContext(ctx, getClosestPackSizeByQuantity, quantity)
	var i PackSize
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Quantity,
		&i.DeletedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getPackSize = `-- name: GetPackSize :one
SELECT id, name, quantity, deleted_at, created_at FROM pack_sizes
WHERE deleted_at IS NULL and id = $1
LIMIT 1
`

func (q *Queries) GetPackSize(ctx context.Context, id int64) (PackSize, error) {
	row := q.db.QueryRowContext(ctx, getPackSize, id)
	var i PackSize
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Quantity,
		&i.DeletedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getPackSizeCount = `-- name: GetPackSizeCount :one
SELECT COUNT(id) FROM pack_sizes
WHERE deleted_at IS NULL
`

func (q *Queries) GetPackSizeCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getPackSizeCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getPackSizesWithPagination = `-- name: GetPackSizesWithPagination :many
SELECT id, name, quantity, deleted_at, created_at FROM pack_sizes
WHERE deleted_at IS NULL
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetPackSizesWithPaginationParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetPackSizesWithPagination(ctx context.Context, arg GetPackSizesWithPaginationParams) ([]PackSize, error) {
	rows, err := q.db.QueryContext(ctx, getPackSizesWithPagination, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PackSize{}
	for rows.Next() {
		var i PackSize
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Quantity,
			&i.DeletedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPackSizesWithoutPagination = `-- name: GetPackSizesWithoutPagination :many
SELECT id, name, quantity, deleted_at, created_at FROM pack_sizes
WHERE deleted_at IS NULL
ORDER BY id
`

func (q *Queries) GetPackSizesWithoutPagination(ctx context.Context) ([]PackSize, error) {
	rows, err := q.db.QueryContext(ctx, getPackSizesWithoutPagination)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PackSize{}
	for rows.Next() {
		var i PackSize
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Quantity,
			&i.DeletedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePackSize = `-- name: UpdatePackSize :one
UPDATE pack_sizes
SET name = $1, quantity = $2
WHERE id = $3
RETURNING id, name, quantity, deleted_at, created_at
`

type UpdatePackSizeParams struct {
	Name     string `json:"name"`
	Quantity int32  `json:"quantity"`
	ID       int64  `json:"id"`
}

func (q *Queries) UpdatePackSize(ctx context.Context, arg UpdatePackSizeParams) (PackSize, error) {
	row := q.db.QueryRowContext(ctx, updatePackSize, arg.Name, arg.Quantity, arg.ID)
	var i PackSize
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Quantity,
		&i.DeletedAt,
		&i.CreatedAt,
	)
	return i, err
}
